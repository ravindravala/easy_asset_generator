import 'dart:io';

void main(List<String> args) {
  final assetDir = Directory('assets');
  final resourcesDir = Directory('lib/resources');

  // Check if assets folder exists
  if (!assetDir.existsSync()) {
    print('‚ùå assets/ folder not found.');
    return;
  }

  // Delete existing resources folder if it exists
  if (resourcesDir.existsSync()) {
    print('üóëÔ∏è  Deleting existing lib/resources folder...');
    resourcesDir.deleteSync(recursive: true);
  }

  // Create resources folder
  print('üìÅ Creating lib/resources folder...');
  resourcesDir.createSync(recursive: true);

  // Scan assets folder and organize by subfolders
  final Map<String, List<String>> assetMap = {};
  final files = assetDir.listSync(recursive: true).whereType<File>();

  for (final file in files) {
    print('üìù Found: ${file.path}');

    // Get relative path from assets folder
    final relativePath = file.path.replaceFirst('assets/', '');
    final pathParts = relativePath.split('/');

    // Only consider files that are in subfolders (not directly in assets folder)
    if (pathParts.length > 1) {
      final category = pathParts[0];

      // Initialize category if not exists
      if (!assetMap.containsKey(category)) {
        assetMap[category] = [];
      }

      // Add file path to category
      assetMap[category]!.add(file.path);
    } else {
      print('‚ö†Ô∏è  Skipping file in root assets folder: ${file.path}');
    }
  }

  // Generate individual asset files for each category
  for (final category in assetMap.keys) {
    _generateAssetFile(category, assetMap[category]!);
  }

  // Generate main assets.dart file
  _generateMainAssetsFile(assetMap.keys.toList());

  print('‚úÖ Asset generation completed!');
  print('üìÇ Generated files in lib/resources/');
}

void _generateAssetFile(String category, List<String> files) {
  final fileName = '${category.toLowerCase()}.dart';
  final file = File('lib/resources/$fileName');

  final buffer = StringBuffer();
  buffer.writeln('// Auto-generated by EASY ASSETS GENERATOR');
  buffer.writeln('// Do NOT modify this file manually!');
  buffer.writeln('// This file provides easy access to all asset categories.');
  buffer.writeln();

  // Create class name (just capitalize the category name)
  final className = _capitalize(category);
  buffer.writeln('class $className {');
  buffer.writeln('  const $className._();');
  buffer.writeln();
  buffer.writeln('  static const $className instance = $className._();');
  buffer.writeln();

  // Add each file as a static constant
  for (final filePath in files) {
    final fieldName = _getFieldName(filePath);
    buffer.writeln('  static const String $fieldName = \'$filePath\';');
  }

  buffer.writeln('}');

  file.writeAsStringSync(buffer.toString());
  print('üìÑ Generated: lib/resources/$fileName');
}

void _generateMainAssetsFile(List<String> categories) {
  final file = File('lib/resources/assets.dart');

  final buffer = StringBuffer();
  buffer.writeln('// Auto-generated by EASY ASSETS GENERATOR');
  buffer.writeln('// Do NOT modify this file manually!');
  buffer.writeln('// This file provides easy access to all asset categories.');
  buffer.writeln();

  // Import all category files
  for (final category in categories) {
    final fileName = '${category.toLowerCase()}.dart';
    buffer.writeln('import \'$fileName\';');
  }
  buffer.writeln();

  // Create main Assets class
  buffer.writeln('class Assets {');
  buffer.writeln('  const Assets._();');
  buffer.writeln();
  buffer.writeln('  static const Assets instance = Assets._();');
  buffer.writeln();

  // Add static getters for each category
  for (final category in categories) {
    final className = _capitalize(category);
    final fieldName = category.toLowerCase();
    buffer.writeln('  static $className get $fieldName => $className.instance;');
  }

  buffer.writeln('}');

  file.writeAsStringSync(buffer.toString());
  print('üìÑ Generated: lib/resources/assets.dart');
}

String _capitalize(String text) {
  if (text.isEmpty) return text;
  return text[0].toUpperCase() + text.substring(1).toLowerCase();
}

String _getFieldName(String filePath) {
  // Extract filename without extension
  final fileName = filePath.split('/').last;
  final nameWithoutExt = fileName.split('.').first;

  // Convert to camelCase and remove special characters
  return nameWithoutExt
      .replaceAll(RegExp(r'[^a-zA-Z0-9]'), '_')
      .split('_')
      .map((word) => word.isEmpty ? '' : word[0].toUpperCase() + word.substring(1).toLowerCase())
      .join('')
      .replaceFirst(RegExp(r'^.'), nameWithoutExt[0].toLowerCase());
}
